cd angular_todo
npm install
ng build

nginx.conf
==========
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;
	
    include /etc/nginx/conf.d/*.conf;
}

site.conf
=========
server { 
 listen 80;
 server_name frontend;
 location / {
   # This would be the directory where your React app's static files are stored at
   root /usr/share/nginx/html;
   try_files $uri /index.html;
 }
 
 location /api {
   proxy_pass http://10.16.42.27/api;
 }
}

angular_todo
============
FROM nginx:alpine
RUN rm -rf /usr/share/nginx/html/*
COPY ./dist/angular/ /usr/share/nginx/html
COPY ./nginx/nginx.conf /etc/nginx/nginx.conf
COPY ./nginx/site.conf /etc/nginx/conf.d/site.conf
EXPOSE 80
ENTRYPOINT ["nginx","-g","daemon off;"]


node_todo_api
=============
FROM node:alpine
RUN mkdir -p /app
WORKDIR /app
COPY ./ ./
RUN npm i
CMD ["npm", "run", "start"]


docker-compose.yml
==================
version: '1.0'

services:
  frontend:
    image: angular-frontend
    volumes:
      - ./angular_todo:/app
	ports:
      - "80:80"

  backend:
    image: node-backend
    volumes:
      - ./node_todo_api:/app
	  
	  
docker-compose up --build
	  

build-push.pp
=============
class { 'docker':
  package_name => 'docker.io',
  docker_users => ['ubuntu'],
}

exec { 'build-image-frontend':
  cwd 		=> '/home/labuser/Desktop/Project/devopsengineer-appdepl-automation/',
  command 	=> 'docker build -f Dockerfile -t angular-frontend .',
  path 		=> ['/usr/bin', '/bin', '/usr/sbin'],
}

exec { 'build-image-backend':
  cwd 		=> '',
  command 	=> 'docker build -f Dockerfile -t node-backend .',
  path 		=> ['/usr/bin', '/bin', '/usr/sbin'],
}

exec { 'docker-push-frontend':
  command => 'docker push peterraj/angular-frontend',
  path => ['/usr/bin', '/bin', '/usr/sbin'],
}

exec { 'docker-push-backend':
  command => 'docker push peterraj/node-backend',
  path => ['/usr/bin', '/bin', '/usr/sbin'],
}

puppet apply build-push.pp


pull-run.pp
===========
class { 'docker':
  package_name => 'docker.io',
  docker_users => ['ubuntu'],
}

class {'docker::compose':
  ensure => present,
  version => '1.21.2',
}

exec { 'docker-pull-frontend':
  command => 'docker pull peterraj/frontend',
  path => ['/usr/bin', '/bin', '/usr/sbin'],
}

exec { 'docker-pull-backend':
  command => 'docker pull peterraj/backend',
  path => ['/usr/bin', '/bin', '/usr/sbin'],
}

exec { 'docker-compose':
  cwd 		=> '',
  command => 'docker compose up --build',
  path => ['/usr/bin', '/bin', '/usr/sbin'],
}

puppet apply pull-run.pp
